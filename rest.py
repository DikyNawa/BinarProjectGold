# -*- coding: utf-8 -*-
"""REST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYcCAP2BQQkjFAjRMc5BLyMr8xpAc9Jh
"""
#import library regex, sqlite, pandas
import re
import sqlite3
import pandas as pd

#import library untuk flask
from flask import Flask, jsonify, request, make_response
from flask_swagger_ui import get_swaggerui_blueprint

app = Flask(__name__)
app.config['JSON_SORT_KEYS'] = False

data_base=sqlite3.connect('data.db', check_same_thread=False)
data_base.row_factory = sqlite3.Row
mycursor = data_base.cursor()
data_base.execute('''CREATE TABLE IF NOT EXISTS data (id INTEGER PRIMARY KEY AUTOINCREMENT, old_text varchar(255), new_text varchar(255));''')

SWAGGER_URL ='/swagger'
API_URL = '/static/swagger.json'
SWAGGERUI_BLUEPRINT = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={
        'app_name':"Text and CSV Twitter Cleansing"
    }
)
app.register_blueprint(SWAGGERUI_BLUEPRINT, url_prefix=SWAGGER_URL)

#welcomepage
@app.route('/', methods=['GET'])
def get():
  return "Welcome to Text and CSV Cleansing API by DikyNawa"

#data get dan post
@app.route("/data", methods=["GET","POST"])
def data():
  if request.method == "POST":
    #mendapat inputan text
    text = str(request.form['text'])
    #proses cleansing dengan regex(menghapus teks dengan awalan angka sebanyak 1 angka atau lebih)
    text_clean_0 = re.sub("^(\d{1,})", ' ', text)
    #proses cleansing dengan regex(menghapus karakter XD atau URL atau USER atau RT atau #)
    text_clean_1 = re.sub("XD|URL|USER|RT|#", ' ', text_clean_0)
    #proses cleansing dengan regex(mengganti teks yang berpola seperti \xf0\x9f\x8d\)
    text_clean_2 = re.sub(r"\\x[A-Za-z0-9]+", " ", text_clean_1)
    #proses cleansing dengan regex(mengganti apapun selain alfanumerik)
    text_clean_3 = re.sub("[^0-9a-zA-Z]", ' ', text_clean_2)
    #proses cleansing dengan regex(mengganti 2 kali spasi atau lebih menjadi 1 spasi)
    text_clean = re.sub("\s\s+", " ", text_clean_3)
    #proses membuat teks menjadi huruf kecil semua
    text_clean=text_clean.lower()
    sql = "insert into data(old_text,new_text) values(?,?)"
    val = (text, text_clean)
    mycursor.execute(sql, val)
    data_base.commit()

    #define API response
    json_response ={
        'status_code' :200,
        'description' :"Teks Berhasil Dibersihkan!",
        'data_kotor' : text,
        'data_bersih' : text_clean,
    }

    response_data =jsonify(json_response)
    return response_data

  elif request.method == "GET":
    query_text = "select * from data"
    select_data = mycursor.execute(query_text)
    data=[
        dict(id=row[0], old_text=row[1], new_text=row[2])
        for row in select_data.fetchall()
    ]
    return jsonify(data)


@app.route("/data/csv", methods=["POST"])
def input_csv():
  if request.method == 'POST':
    
    file = request.files['file']

    try:
      data = pd.read_csv(file, encoding='iso-8859-1')
      kolom_text_kotor = data.iloc[:, 0]
      list_text_kotor = []
      list_text_bersih = []

      for text in kolom_text_kotor:
        #proses cleansing dengan regex(menghapus teks dengan awalan angka sebanyak 1 angka atau lebih)
        text_clean_0 = re.sub("^(\d{1,})", ' ', text)
        #proses cleansing dengan regex(menghapus karakter XD atau URL atau USER atau RT atau #)
        text_clean_1 = re.sub("XD|URL|USER|RT|#", ' ', text_clean_0)
        #proses cleansing dengan regex(mengganti teks yang berpola seperti \xf0\x9f\x8d\)
        text_clean_2 = re.sub(r"\\x[A-Za-z0-9]+", " ", text_clean_1)
        #proses cleansing dengan regex(mengganti apapun selain alfanumerik)
        text_clean_3 = re.sub("[^0-9a-zA-Z]", ' ', text_clean_2)
        #proses cleansing dengan regex(mengganti 2 kali spasi atau lebih menjadi 1 spasi)
        text_clean = re.sub("\s\s+", " ", text_clean_3)
        #proses membuat teks menjadi huruf kecil semua
        text_clean=text_clean.lower()
        sql = "insert into data(old_text,new_text) values(?,?)"
        val = (text, text_clean)
        mycursor.execute(sql, val)
        data_base.commit()

        list_text_kotor.append(text)
        list_text_bersih.append(text_clean)
 

    except:
      data = pd.read_csv(file, encoding='utf-8')

      kolom_text_kotor = data.iloc[:, 0]
      list_text_kotor = []
      list_text_bersih = []

      for text in kolom_text_kotor:
        #proses cleansing dengan regex(menghapus teks dengan awalan angka sebanyak 1 angka atau lebih)
        text_clean_0 = re.sub("^(\d{1,})", ' ', text)
        #proses cleansing dengan regex(menghapus karakter XD atau URL atau USER atau RT atau #)
        text_clean_1 = re.sub("XD|URL|USER|RT|#", ' ', text_clean_0)
        #proses cleansing dengan regex(mengganti teks yang berpola seperti \xf0\x9f\x8d\)
        text_clean_2 = re.sub(r"\\x[A-Za-z0-9]+", " ", text_clean_1)
        #proses cleansing dengan regex(mengganti apapun selain alfanumerik)
        text_clean_3 = re.sub("[^0-9a-zA-Z]", ' ', text_clean_2)
        #proses cleansing dengan regex(mengganti 2 kali spasi atau lebih menjadi 1 spasi)
        text_clean = re.sub("\s\s+", " ", text_clean_3)
        #proses membuat teks menjadi huruf kecil semua
        text_clean=text_clean.lower()
        sql = "insert into data(old_text,new_text) values(?,?)"
        val = (text, text_clean)
        mycursor.execute(sql, val)
        data_base.commit()

        
        list_text_kotor.append(text)
        list_text_bersih.append(text_clean)


    #define API response
    json_response ={
      'status_code' :200,
      'description' :"Teks Berhasil Dibersihkan 1!",
      'data_kotor' : list_text_kotor,
      'data_bersih' : list_text_bersih,
    }

    response_data =jsonify(json_response)
    return response_data
        

@app.errorhandler(400)
def handle_400_error(_error):
  "return sebuah http 400 error kepada client"
  return make_response(jsonify({'error':'Misunderstood'}), 400)

@app.errorhandler(401)
def handle_401_error(_error):
   "return sebuah http 401 error kepada client"
   return make_response(jsonify({'error':'Unauthorised'}), 401)

@app.errorhandler(404)
def handle_404_error(_error):
   "return sebuah http 404 error kepada client"
   return make_response(jsonify({'error':'Not Found'}), 404)

@app.errorhandler(500)
def handle_500_error(_error):
   "return sebuah http 500 error kepada client"
   return make_response(jsonify({'error':'Server error'}), 500)  


if __name__ == '__main__':
  app.run(debug=True)